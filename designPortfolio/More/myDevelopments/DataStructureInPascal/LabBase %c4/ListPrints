unit ListPrints;
{Programmer:	Makoto Sadahiro }
{starting date: Nov 9th '93}
{last modified date:  Nov 10th '93}

{unit is for particularly many kinds of special printouts}
{which goes with unit listype,listADT}
{the build order: listype->listADT->ListPrint->calling program}

interface
	uses
		time, listype, listADT;				{type declaration there}

	type
{StyleType}
		StyleType = (Full, Weekly, whateveryouneedtype);
				{declaration}
{*****************************}

{procedures aer series of printing procedure}
{these are all used from the last procedure-PrintList}

{*****************************}

{procedure calls all goes to here first, then call another specified}
{printing procedures above}
{the printing style will be evaluated in case statement}
	procedure PrintList (List: ListType;
									PrintStyle: StyleType);
	{pre:lsit exists}
	{post:no change but list printed out in the way of each style}
{*****************************}

implementation

{Weekly List Printing}
{especially implimanted for "lab"-cis211.lab6}
	procedure WklyListPrint (List: ListType);
	{in: Linked list}
		var
			Tptr: PointerType;
			max, usd, rem: integer;
	begin
		writeln;				{making space from last action}
		writeln(' weekly usage report..................');
		if EmptyList(List) then
			writeln('shouldnt be here.  list is empty')
		else
			begin
				Tptr := List;
				write(':student #' : 12);
				write(':access status' : 16);
				write(':max Hours' : 12);
				write(':used Hours' : 13);
				write(':remaining Hours' : 18);
				write(':timeOver' : 11);
				writeln;				{carige return}
				while Tptr <> nil do
					begin
						Tptr^.Info.remHr := Tptr^.Info.maxHr - Tptr^.Info.usdHr;
						write(Tptr^.Info.key : 12);				{student number}
						if (Tptr^.Info.validity) then
							write('valid student' : 16)
						else
							write('Invalid student' : 16);				{student validity}
						max := convertToHr(Tptr^.Info.maxHr);
						write(max div 100 : 8, ':' : 1);
						if (max mod 100) = 0 then
							write('00' : 2)
						else
							write(max mod 100 : 2);				{maximum hours}
						usd := convertToHr(Tptr^.Info.usdHr);
						write(usd div 100 : 9, ':' : 1);
						if (usd mod 100) = 0 then
							write('00' : 2)
						else
							write(usd mod 100 : 2);				{used hours}
						rem := convertToHr(Tptr^.Info.remHr);
						write(rem div 100 : 14, ':' : 1);
						if (rem mod 100) = 0 then
							write('00' : 2)
						else
							write(rem mod 100 : 2);
						write('' : 4);				{remaining hours}
						if (Tptr^.Info.penalty) then
							write('penalty' : 11)
						else
							write('No penalty' : 11);				{penalty}
						writeln;				{carige return}
						Tptr := Tptr^.next;
					end;				{while <>nil }
			end;				{else}
		writeln('' : 5, '{ ......................................................the end of weekly usage report..}');
		writeln;				{making space for next action}
	end;				{WklyListPrint}
{*****************************}

{Full List Printing}
{especially implimanted for "lab"-cis211.lab6}
	procedure FullListPrint (List: ListType);
	{in: linked list}
		var
			Tptr: PointerType;
			max, usd, rem: integer;
	begin
		writeln;				{making space from last action}
		writeln(' Full usage report..................');
		if EmptyList(List) then
			writeln('shouldnt be here.  list is empty')
		else
			begin
				Tptr := List;
				write(':student #' : 10);
				write('stuName' : 16);
				write(':access' : 10);
				write(':max Hours' : 12);
				write(':used Hours' : 13);
				write(':remaining Hours' : 18);
				write(':timeOver' : 11);
				writeln;				{carige return}
				while Tptr <> nil do
					begin
						Tptr^.Info.remHr := Tptr^.Info.maxHr - Tptr^.Info.usdHr;
						write(Tptr^.Info.key : 8);				{student number}
						write(Tptr^.Info.name : 20);			{student name}
						if (Tptr^.Info.validity) then
							write('valid' : 8)
						else
							write('Invalid' : 8);				{student validity}
						max := convertToHr(Tptr^.Info.maxHr);
						write(max div 100 : 8, ':' : 1);
						if (max mod 100) = 0 then
							write('00' : 2)
						else
							write(max mod 100 : 2);				{maximum hours}
						usd := convertToHr(Tptr^.Info.usdHr);
						write(usd div 100 : 9, ':' : 1);
						if (usd mod 100) = 0 then
							write('00' : 2)
						else
							write(usd mod 100 : 2);				{used hours}
						rem := convertToHr(Tptr^.Info.remHr);
						write(rem div 100 : 14, ':' : 1);
						if (rem mod 100) = 0 then
							write('00' : 2)
						else
							write(rem mod 100 : 2);
						write('' : 4);				{remaining hours}
						if (Tptr^.Info.penalty) then
							write('penalty' : 11)
						else
							write('No penalty' : 11);				{penalty}
						writeln;				{carige return}
						Tptr := Tptr^.next;
					end;				{while <>nil }
			end;				{else}
		writeln('' : 5, '{ ......................................................the end of weekly full out put..}');
		writeln;				{making space for next action}
	end;				{FullListPrint}
{*****************************}
{add more variety of printing way here}
{procedure of printing here will be all called from next procedure--PrintList}
{dont forget setting up case statement in procedure print list}
{also add type at beginning}
{*****************************}

	procedure PrintList (List: ListType;
									PrintStyle: StyleType);
	begin
		case PrintStyle of
			Weekly: 
				WklyListPrint(List);
			Full: 
				fullListPrint(List);
		end;				{case}
	end;				{PrintList}
{the other styles of printing can be added here in "case" statement...}
{also add type of print in type-StyleType at the beginning of unit}
{*************************************}
end.				{ListPrint}