unit EditCom;
{Programmer:	Makoto Sadahiro }
{starting date: Dec 11th '93}
{last modified date:  Dec 12th '93}

{FileCom is series of file commands for Oak Tree}
interface
	uses
		IFaceUtil, IOOC, bstType, bstadt;

{add node to tree}
	procedure AddToTree (var myTree: TreeType);
	{post: tree with more added info}
{delete node from tree}
	procedure deleteFromTree (var myTree: TreeType);
	{post: tree with less deleted info}
{*************************************}
implementation

	procedure AddToTree (var myTree: TreeType);
		var
			nameLength: integer;
			stuNode, dammyNodeCopy: TreeElementType;
			there, doneName, doneMajor, doneStatus: boolean;
	begin
		doneName := false;
		while not (doneName) do
			begin
				writeln('	name has to be less than 12 charactors');
				write('nameToBeAdded>');
				readln(stuNode.key);
				nameLength := length(stuNode.key);
				if nameLength <= preferedNamelength then
					doneName := true
				else
					writeln('name too long');
			end;		{while not (doneName) do}
		doneMajor := false;
		while not (doneMajor) do
			begin
				writeln('	choice of major-ART, BIS, CIS, CPE, DOG, ELE, MTH');
				write('majorToBeAdded>');
				readln(stuNode.major);
				if stuNode.major in [ART, BIS, CIS, CPE, DOG, ELE, MTH] then
					doneMajor := true
				else
					writeln('no ', stuNode.major, ' major decleared');
			end;		{while not (doneMajor) do}
		doneStatus := false;
		while not (doneStatus) do
			begin
				writeln('	choice of living status-Comuter, Homeless, Resident');
				write('majorToBeAdded/C,H,R/>');
				readln(stuNode.living);
				if stuNode.living in [C, H, R] then
					doneStatus := true
				else
					writeln('no ', stuNode.living, ' status decleared');
			end;		{while not (doneStatus) do}
		RetrieveElement(myTree, stuNode.key, dammyNodeCopy, there);
		if not (there) then
			begin
				Insertelement(myTree, stuNode);
				writeln('name ', stuNode.key, ' added');
			end		{if not (there) then}
		else
			writeln('name already exists..can not over rided');
	end;		{AddToTree}
{*************************************}

	procedure deleteFromTree (var myTree: TreeType);
		var
			stuNode, dammyNodeCopy: TreeElementType;
			there: boolean;
	begin
		writeln('	name has to be less than 12 charactors');
		write('nameToBeDeleted');
		readln(stuNode.key);
		RetrieveElement(myTree, stuNode.key, dammyNodeCopy, there);
		if there then
			begin
				DeleteElement(myTree, stuNode.key);
				writeln('name ', stuNode.key, ' has been deleted');
			end		{if there then}
		else
			writeln('no name ', stuNode.key, ' exists');
	end;		{AddToTree}
{*************************************}

{*************************************}
end.		{FileCom}