unit RailLoader;{loading arrays in each case}

interface
	procedure LoadRail50 (var Filetxt: text; var Rail: ArrType; var OFlw: ArrType; var NumericChaser: integer; var Stopper: boolean);			{this will load up Rail-array with real numbers}

implementation
	procedure LoadRail50 (var Filetxt: text; var Rail: ArrType; var OFlw: ArrType; var NumericChaser: integer; var Stopper: boolean);			{this will load up Rail-array with real numbers}
	begin
		NumericChaser := 0;
		repeat
			if eof(Filetxt) then
				begin
					Stopper := false;
					NumericChaser := NumericChaser + 1
				end
			else
				begin
					NumericChaser := NumericChaser + 1;
					if NumericChaser in [1..50] then		{store up to 50 arrays in here}
						readln(Filetxt, Rail[NumericChaser])
					else if NumericChaser in [51..100] then		{stoer extra 50 arrays in here}
						readln(Filetxt, OFlw[NumericChaser - 50])
				end;															{if data is more than 100?  ha! ha! I donta no!}
		until (Stopper = false) or (Rail[NumericChaser] < 0);
		NumericChaser := NumericChaser - 1		{subtracting negative# already read}
	end;		{end of procedure LoadRail}